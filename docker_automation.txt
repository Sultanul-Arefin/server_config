****Docker****

# Docker is a tool designed to make it easier to deploy and run applications by using containers.
# Container allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package.
# stack ( স্তূপ, গাঁঘা )

**** Docer Architecture ****

# DockerFile( describes steps to create a Docker image. It's like a recipe with all ingredients and steps necessary in making your dish )

--> cycle
# Developer -> Dockerfile -> Docker Container or Docker Hub -> Pull Image from Docker Hub to different env to check

# Virtualization vs Containerization

Virtualization: Host OS -> Hypervisor -> Guest -> Apps
Containerization: Host OS -> Container Engine -> lib / bins (dependencies ) -> Apps

# Docker has client-server architecture
-> cli is client -> Docker Daemon ( containers ) is the server
-> all the components of client & server together form the docker engine

# Dockerfile, Docker Image, Docker Containers, Docker Hub/Registry, Docker Client, Docker Server(Daemon), Docker Engine

**** Play with Docker ****
-> https://labs.play-with-docker.com

**** Installation on Linux ****

# Install from docs.docker.com
# docker --version
# docker info ( if docker is running, then it'll show output )
# sudo service docker start (docker started )
# sudo usermod -aG docker usermod ( user add to docker groupd )

# docker images ( all the images )
# docker ps ( list out running containers )
# docker ps -a ( list out all containers )

# docker run image_name (hello_world)( to run a image. if image is not available locally, it'll be pulled from repository )
# service docker stop ( to stop docker )

**** Basic Commands ****

# Basic
> docker version ( info about docker client & server )
> docker -v
> docker info
> docker --help  (examples: docker images --help, docker run --help )
> docker login ( login to hub.docker.com )

# Images
> docker images ( ls of images ) ( docker images --help )
> docker pull ( docker pull nginx )
> docker rmi ( to remove an images. docker rmi image_name or image_id )

# Containers
> docker ps ( to see running container, -a to see all containers )
> docker run ( docker run image_name, if unable to find locally, it'll get from repo) ( docker run ubuntu )
( docker run -it ubuntu ) ( now, go to another terminal. type docker ps, it'll show that ubuntu is running )
> docker start ( docker start container_id )
> docker stop ( docker stop container_id )

# Systems
> docker stats ( details on the running container )
> docker system df ( disk usage of docker )
> docker system prune ( to remove unused data ) (see, docker system prune --help to more )
-> docker system prune -a ( remove all unused container, images etc )


**** Docer Images ****

# Docker Image are templates used to create docker containers
# Container is a running instance of image
# Images stored in registries

# docker images --help
# docker images
# docker pull ubuntu
# docker pull ubuntu:18.04 ( with tags )
# docker images -q ( give images id )
# docker images -f "dangling=false" ( 'f' for filters, provide some filters ) ( dangling images are the images, that are associated with a container or a running container )
# docker images -f "dangling=false" -q
# docker run ubuntu ( by running a image, we actually create a container out of it )
( docker run --name MyUbuntu -it ubuntu bash ) ( start a container with name )
# docker rmi ubuntu ( remove image ) ( if used by a container, it'll be unable to delete. 1st stop the container, then remove the image )
# docker rmi -f ubuntu ( remove forcefully )
# docker inspect image_name | id ( to info about image )
# note: image typically contains a union of layered filesystems stacked on top of each other )


**** Containers ****

# Containers are running instances of Docker Images

> docker ps
> docker run ImageName ( docker run hello-world )
> docker start containerName/Id
> docker stop containerName/Id

> docker pause containerName/Id
> docker unpause containerName/Id

> docker top containerName/Id ( top processes )
> docker stats containerName/Id ( stats of running container )

> docker attach containerName/Id ( to go inside the container )

> docker kill containerName/Id ( kill container, if it's running )
> docker rm containerName/Id ( remove container )

> docker history ImageName/Id ( history of a particular image )


**** Run Jenkins On Docker ****

# set jenkins home on Docker volume and host machine ( see later )

> docker pull jenkins
> docker run -p 8080:8080 -p 50000:50000 jenkins ( -p expose the port 8080 on the host system which corresponcse to 8080 port for the docker server ) ( exporting port 50000 for jenkins api ) ( image name is jenkins ) ( all the data will be lost when we delete the container with this command )

# Persistent storage for Jenkins_Home
> docker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/jenkins_home jenkins ( --name MyJenkins1, running with a name )
# if you stop, remove & then create this container again old file will be remain same.

# docker volume create myjenkins ( to create a volume )
# docker volume ls ( to see volumes )
# docker volume inspect myjenkins ( details about the volume ) ( mount point is where it is available )( though, it's available in the host machine, we're not able to touch it or change any functions )

# after creating volume,
> docker run --name MyJenkins2 -p 9090:8080 -p 50000:50000 -v myjenkins:/var/jenkins_home jenkins ( giving volume name instead of physical location )

# docker inspect MyJenkins2 ( details about the MyJenkins2 Container ) ( See Mounts, where type is volume & name is sultan )



**** Docker File ****


# Dockerfile: A text file with instructions to build image
Or, Automation of Docker Image Creatin

FROM
RUN ( run gets executed during the building of the image )
CMD ( cmd gets executed only when we create a container out of the image )

Step 1:  Create a file named Dockerfile
> mkdir Dockerfiles && cd Dockerfiles
> touch Dockerfile
> vim Dockerfile

FROM ubuntu # first instructions a docker file starts with FROM. have to give a base image
# If we want to create an empty image, use FROM scratch
MAINTAINER sultan <fahimsultan4@gmail.com> # optional
RUN apt-get update # run this command on the image
CMD ["echo", "Hello world....!from first docker image] # if we want to run something on command line during container creation

> docker build ( to build the image )
> docker build . ( current folder )
> docker build -t myimage1:1.0 . ( tag an image )



**** Docker Compose *****

# what | why
# Installation
# how to Create docker compose file
# how to use docker compose file to create services
# how to bring up | bring down services
# basic commands

# what
-> tool for defining & running multi-container docker applications
-> use yaml files to configure application services
-> docker compose up ( start all services )
-> docker compose down ( stop all services )
-> can scale up selected services when required

# Installation
-> docker-compose -v ( if not installed, then install it)
or, docker-compose version

 # Create docker compose file at any location on our system (.yml extension )
 -> docker-compose.yml

version: '3'

services:

  web:
    image: nginx
    ports:
    - 9090:80 # expose the port 80 of the web server, & expose it on port 9090 on my host machine

  database:
    image:redis

# Check the validity of our file
-> docker-compose config

# Run docker-compose.yml file by,
-> docker-compose up -d ( start this in a detach mode )
-> docker ps ( to check )
-> docker-compose down ( to stop )

# how to scale services
-> docker-compose up -d --scale database=4 ( database 4 instances )


**** Docker Volume, How to Create Volumes, What is Bind Mount, Docker Storage ****

# volumes
# create, list, delete
# attach volume to a container
# share volume among containers
# bind mounts

# volumes
-> volumes are the preferred mechanism for persisting data generated by and used by Docker containers.

 Uses of volumes
 -> Decoupling container from storage
 -> Share Volume (storage/data) among different containers
 -> attach volume to container
 -> On deleting container volume doesn't delete

 ### docker volume ### ( to get help )

 # create, list, delete

 -> docker volume create my_frst_vol
 -> docker volume ls
 -> docker volume inspect my_frst_vol ( get the details of a volume )
 -> docker volume rm my_frst_vol ( remove the volume )
 -> docker volume prune ( delete all unused volume )

# attach volume to a container
-> docker pull jenkins
-> docker run --name MyJenkins1 -p 8080:8080 -p 50000:50000 jenkins ( it'll run jenkins container, & we can browse )
-> docker run --name MyJenkins1 -v my_frst_vol:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins ( attached volume, correspond to jenkins home directory ) ( Use flag: -v, --volume, --mount )
-> docker run --name MyJenkins2 -v my_frst_vol:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins ( start another instance of jenkins )
-> Data is being shared between 2 jenkins container.

# bind Mounts
-> bind mounts means a file or directory on the host machine is mounted into a container
-> docker run --name MyJenkins3 -v /home/sultan/Jenkins_Home:/var/jenkins_home -p 9191:8080 -p 40000:50000 jenkins ( a new instance )
