# topics
-> Introduction to Ansible and lab setup
-> Ansible Inventory files
-> Ansible Playbook
-> Variables
-> Conditions
-> Loops
-> Roles
-> Preparing windows server

# Advance topics
-> Ansible galaxy
-> Asynchronous action
-> Error Handling
-> Jinja2 templating
-> Lookups
-> Vaults
-> Dynamic Inventory
-> Custom module
-> Plugins


## Ansible is simple open source IT engine which automates application deployment, intra service orchestration, cloud provisioning and many other IT tools.
Ansible is easy to deploy because it does not use any agents or custom security infrastructure.


# First Learn This: Hosts(inventory) setup, ad-hoc command, playbook


(i) 												******Installation:******

-> Need to install python
-> sudo apt-get install python-software-properties  (got it in another tut)-> sudo apt-get install software-properties-common 
-> sudo apt-add-repository -y ppa:ansible/ansible
-> sudo apt-get update
-> sudo apt-get install -y ansible


-> ansible --version

-> Ansible assumes you're using passwordless(key-based) login for SSH.

-> ssh-copy-id username@ip ( for key-based ssh )

-> default user => root, connection => ssh





(ii) 												******Inventory******


-> inventory file provides the list of hosts where the ansible modules needs to be run 
-> /etc/ansible ( can configure in any place )
-> have file named ansible.cfg, & hosts.

-> setup a hosts & try ansible with
-> ansible hostname_in_hosts -m ping (check with ping)
-> ansible hostname_in_hosts -i inventory -m ping ( if custome inventory )





(iii) 											******Ad-Hoc Command******


-> ansible -i hosts -m ping ( define playbook by -i with location )

## Some Command ( suppose we've a hosts named web, db )
$ ansible all -a 'ls -lah /'
$ ansible web -a 'tail /var/log/auth.log'
$ ansible all -m ping ( ping module )( ping all the servers )
$ ansible all -m copy -a 'src=/tmp/file.txt dest=/tmp/c_file.txt' ( copy module )
$ ansible all -m shell -a 'ls -lah /tmp' ( shell module )
$ ansible web -b -K -m apt -a 'name=htop state=present' ( apt module ) ( state=present, installation )
$ ansible web -b -K -m apt -a 'name=htop state=absent' ( state=absent, uninstallation )

-> ansible all -a "free -m" ( to all hosts memory )
-> ansible all -a "free -m" -u sultan (can use -u tag for username)
-> ansible -m shell -a 'hostname' all ( shell module, a for command )
-> ansible -m shell -a 'df -h' all ( available disk space on the server )
-> ansible -m shell -a 'whoami' all ( whoami command )
-> ansible -m shell -a 'getent passwd | grep testuser' all ( show created users of all servers )
-> ansible -b -K -m user -a 'name=testuser state=absent' all ( deleted users that was created )




(iv) 												******Playbook(shortly)******


-> vim playbook.yml
---
- hosts: all
  tasks: 
  - name: Ensure NTP(for time synchronization) is installed
    apt: name=ntp state=latest
  -name: Ensure NTP is running
    service: name=ntp state=started enabled=yes

-> ansible-playbook -b -K playbook.yml ( give password to run )


-> vim apache_in_debian.yml( installing apache2 in debian )
--- # Infrastructure demo
- hosts: ubuntu
  remote_user: sultan
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  vars: 
    username: sultan

  tasks:
  - name: Install apache service on all instalnce that belong to ubuntu group
    apt:
      name: apache2
      state: latest
    notify:
    - start apache2 service

  handlers:
  - name: start apache2 service
    service: 
      name: apache2
      state: restarted

-> ansible-playbook -b -K apache_in_debian.yml


$ vim create_file.yml
-
  name: this is our first play
  hosts: webservers
  tasks: 
    - 
      name: "create a dummy file on webser"
      command: touch /tmp/ansible_dummy.txt

$ ansible-playbook create_file.yml -i inventory.txt ( define inventory too, cause we're not using default inventory )


-> vim playbook.yml
- name: "Installing dns-utils"
  apt: pkg=dnsutils state=latest

- name: "Installing GIT"
  apt: pkg=git state=latest

-> ansible-playbook -K playbook.yml


## install list of packages, instead of define frequentyly
- name: "Installing packages"
  apt: pkg={{ item }} state=latest
  with_items:
  - vim
  - dnsutils
  - git
  - ntp
  - at
  - lvm2

## copy 

- name: "Adding bashrc"
  copy: src=../files/bash.bashrc dest=/etc/bash.bashrc owner=root group=root mode=0644

- name: "Removing sultan bashrc"
  shell: creates=/home/sultan/.bashrc_backup mv /home/sultan/.bashrc /home/sultan/.bashrc_backup

$ ansible-playbook -K playbook.yml



